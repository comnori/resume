{"version":3,"file":"component---src-pages-blog-jsx-2eb60585a98a2e309c6d.js","mappings":"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","sources":["webpack://resume/./node_modules/@ant-design/icons-svg/es/asn/FieldTimeOutlined.js","webpack://resume/./node_modules/@ant-design/icons/es/icons/FieldTimeOutlined.js","webpack://resume/./node_modules/@ant-design/icons-svg/es/asn/FileWordOutlined.js","webpack://resume/./node_modules/@ant-design/icons/es/icons/FileWordOutlined.js","webpack://resume/./node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs","webpack://resume/./node_modules/framer-motion/dist/es/context/MotionContext/index.mjs","webpack://resume/./node_modules/framer-motion/dist/es/context/PresenceContext.mjs","webpack://resume/./node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs","webpack://resume/./node_modules/framer-motion/dist/es/context/MotionContext/create.mjs","webpack://resume/./node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs","webpack://resume/./node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs","webpack://resume/./node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/utils/symbol.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/index.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/dom/motion-proxy.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/html/use-props.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/svg/use-props.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/dom/use-render.mjs","webpack://resume/./node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs","webpack://resume/./node_modules/framer-motion/dist/es/utils/use-constant.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/svg/config-motion.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/html/config-motion.mjs","webpack://resume/./node_modules/framer-motion/dist/es/utils/distance.mjs","webpack://resume/./node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs","webpack://resume/./node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs","webpack://resume/./node_modules/framer-motion/dist/es/utils/get-context-window.mjs","webpack://resume/./node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs","webpack://resume/./node_modules/framer-motion/dist/es/gestures/drag/index.mjs","webpack://resume/./node_modules/framer-motion/dist/es/gestures/pan/index.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/node/state.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs","webpack://resume/./node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/geometry/copy.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/geometry/utils.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/shared/stack.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/styles/transform.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs","webpack://resume/./node_modules/framer-motion/dist/es/debug/record.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs","webpack://resume/./node_modules/framer-motion/dist/es/utils/delay.mjs","webpack://resume/./node_modules/framer-motion/dist/es/animation/interfaces/single-value.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs","webpack://resume/./node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/features/drag.mjs","webpack://resume/./node_modules/framer-motion/dist/es/motion/features/layout.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/dom/motion.mjs","webpack://resume/./node_modules/framer-motion/dist/es/render/dom/utils/create-config.mjs","webpack://resume/./src/pages/blog.jsx"],"sourcesContent":["// This icon file is generated automatically.\nvar FieldTimeOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"defs\", \"attrs\": {}, \"children\": [{ \"tag\": \"style\", \"attrs\": {} }] }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M945 412H689c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h256c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM811 548H689c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h122c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zM477.3 322.5H434c-6.2 0-11.2 5-11.2 11.2v248c0 3.6 1.7 6.9 4.6 9l148.9 108.6c5 3.6 12 2.6 15.6-2.4l25.7-35.1v-.1c3.6-5 2.5-12-2.5-15.6l-126.7-91.6V333.7c.1-6.2-5-11.2-11.1-11.2z\" } }, { \"tag\": \"path\", \"attrs\": { \"d\": \"M804.8 673.9H747c-5.6 0-10.9 2.9-13.9 7.7a321 321 0 01-44.5 55.7 317.17 317.17 0 01-101.3 68.3c-39.3 16.6-81 25-124 25-43.1 0-84.8-8.4-124-25-37.9-16-72-39-101.3-68.3s-52.3-63.4-68.3-101.3c-16.6-39.2-25-80.9-25-124 0-43.1 8.4-84.7 25-124 16-37.9 39-72 68.3-101.3 29.3-29.3 63.4-52.3 101.3-68.3 39.2-16.6 81-25 124-25 43.1 0 84.8 8.4 124 25 37.9 16 72 39 101.3 68.3a321 321 0 0144.5 55.7c3 4.8 8.3 7.7 13.9 7.7h57.8c6.9 0 11.3-7.2 8.2-13.3-65.2-129.7-197.4-214-345-215.7-216.1-2.7-395.6 174.2-396 390.1C71.6 727.5 246.9 903 463.2 903c149.5 0 283.9-84.6 349.8-215.8a9.18 9.18 0 00-8.2-13.3z\" } }] }, \"name\": \"field-time\", \"theme\": \"outlined\" };\nexport default FieldTimeOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport FieldTimeOutlinedSvg from \"@ant-design/icons-svg/es/asn/FieldTimeOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar FieldTimeOutlined = function FieldTimeOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: FieldTimeOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  FieldTimeOutlined.displayName = 'FieldTimeOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(FieldTimeOutlined);","// This icon file is generated automatically.\nvar FileWordOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M854.6 288.6L639.4 73.4c-6-6-14.1-9.4-22.6-9.4H192c-17.7 0-32 14.3-32 32v832c0 17.7 14.3 32 32 32h640c17.7 0 32-14.3 32-32V311.3c0-8.5-3.4-16.7-9.4-22.7zM790.2 326H602V137.8L790.2 326zm1.8 562H232V136h302v216a42 42 0 0042 42h216v494zM528.1 472h-32.2c-5.5 0-10.3 3.7-11.6 9.1L434.6 680l-46.1-198.7c-1.3-5.4-6.1-9.3-11.7-9.3h-35.4a12.02 12.02 0 00-11.6 15.1l74.2 276c1.4 5.2 6.2 8.9 11.6 8.9h32c5.4 0 10.2-3.6 11.6-8.9l52.8-197 52.8 197c1.4 5.2 6.2 8.9 11.6 8.9h31.8c5.4 0 10.2-3.6 11.6-8.9l74.4-276a12.04 12.04 0 00-11.6-15.1H647c-5.6 0-10.4 3.9-11.7 9.3l-45.8 199.1-49.8-199.3c-1.3-5.4-6.1-9.1-11.6-9.1z\" } }] }, \"name\": \"file-word\", \"theme\": \"outlined\" };\nexport default FileWordOutlined;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\n\nimport * as React from 'react';\nimport FileWordOutlinedSvg from \"@ant-design/icons-svg/es/asn/FileWordOutlined\";\nimport AntdIcon from \"../components/AntdIcon\";\nvar FileWordOutlined = function FileWordOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _extends({}, props, {\n    ref: ref,\n    icon: FileWordOutlinedSvg\n  }));\n};\nif (process.env.NODE_ENV !== 'production') {\n  FileWordOutlined.displayName = 'FileWordOutlined';\n}\nexport default /*#__PURE__*/React.forwardRef(FileWordOutlined);","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst MotionConfigContext = createContext({\n    transformPagePoint: (p) => p,\n    isStatic: false,\n    reducedMotion: \"never\",\n});\n\nexport { MotionConfigContext };\n","import { createContext } from 'react';\n\nconst MotionContext = createContext({});\n\nexport { MotionContext };\n","import { createContext } from 'react';\n\n/**\n * @public\n */\nconst PresenceContext = createContext(null);\n\nexport { PresenceContext };\n","import { useLayoutEffect, useEffect } from 'react';\nimport { isBrowser } from './is-browser.mjs';\n\nconst useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\n\nexport { useIsomorphicLayoutEffect };\n","import { useContext, useMemo } from 'react';\nimport { MotionContext } from './index.mjs';\nimport { getCurrentTreeVariants } from './utils.mjs';\n\nfunction useCreateMotionContext(props) {\n    const { initial, animate } = getCurrentTreeVariants(props, useContext(MotionContext));\n    return useMemo(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);\n}\nfunction variantLabelsAsDependency(prop) {\n    return Array.isArray(prop) ? prop.join(\" \") : prop;\n}\n\nexport { useCreateMotionContext };\n","import { isVariantLabel } from '../../render/utils/is-variant-label.mjs';\nimport { isControllingVariants } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction getCurrentTreeVariants(props, context) {\n    if (isControllingVariants(props)) {\n        const { initial, animate } = props;\n        return {\n            initial: initial === false || isVariantLabel(initial)\n                ? initial\n                : undefined,\n            animate: isVariantLabel(animate) ? animate : undefined,\n        };\n    }\n    return props.inherit !== false ? context : {};\n}\n\nexport { getCurrentTreeVariants };\n","import { createContext } from 'react';\n\nconst LayoutGroupContext = createContext({});\n\nexport { LayoutGroupContext };\n","import { createContext } from 'react';\n\n/**\n * Internal, exported only for usage in Framer\n */\nconst SwitchLayoutGroupContext = createContext({});\n\nexport { SwitchLayoutGroupContext };\n","const motionComponentSymbol = Symbol.for(\"motionComponentSymbol\");\n\nexport { motionComponentSymbol };\n","import * as React from 'react';\nimport { forwardRef, useContext } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { MotionContext } from '../context/MotionContext/index.mjs';\nimport { useVisualElement } from './utils/use-visual-element.mjs';\nimport { useMotionRef } from './utils/use-motion-ref.mjs';\nimport { useCreateMotionContext } from '../context/MotionContext/create.mjs';\nimport { loadFeatures } from './features/load-features.mjs';\nimport { isBrowser } from '../utils/is-browser.mjs';\nimport { LayoutGroupContext } from '../context/LayoutGroupContext.mjs';\nimport { LazyContext } from '../context/LazyContext.mjs';\nimport { SwitchLayoutGroupContext } from '../context/SwitchLayoutGroupContext.mjs';\nimport { motionComponentSymbol } from './utils/symbol.mjs';\n\n/**\n * Create a `motion` component.\n *\n * This function accepts a Component argument, which can be either a string (ie \"div\"\n * for `motion.div`), or an actual React component.\n *\n * Alongside this is a config option which provides a way of rendering the provided\n * component \"offline\", or outside the React render cycle.\n */\nfunction createMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component, }) {\n    preloadedFeatures && loadFeatures(preloadedFeatures);\n    function MotionComponent(props, externalRef) {\n        /**\n         * If we need to measure the element we load this functionality in a\n         * separate class component in order to gain access to getSnapshotBeforeUpdate.\n         */\n        let MeasureLayout;\n        const configAndProps = {\n            ...useContext(MotionConfigContext),\n            ...props,\n            layoutId: useLayoutId(props),\n        };\n        const { isStatic } = configAndProps;\n        const context = useCreateMotionContext(props);\n        const visualState = useVisualState(props, isStatic);\n        if (!isStatic && isBrowser) {\n            /**\n             * Create a VisualElement for this component. A VisualElement provides a common\n             * interface to renderer-specific APIs (ie DOM/Three.js etc) as well as\n             * providing a way of rendering to these APIs outside of the React render loop\n             * for more performant animations and interactions\n             */\n            context.visualElement = useVisualElement(Component, visualState, configAndProps, createVisualElement);\n            /**\n             * Load Motion gesture and animation features. These are rendered as renderless\n             * components so each feature can optionally make use of React lifecycle methods.\n             */\n            const initialLayoutGroupConfig = useContext(SwitchLayoutGroupContext);\n            const isStrict = useContext(LazyContext).strict;\n            if (context.visualElement) {\n                MeasureLayout = context.visualElement.loadFeatures(\n                // Note: Pass the full new combined props to correctly re-render dynamic feature components.\n                configAndProps, isStrict, preloadedFeatures, initialLayoutGroupConfig);\n            }\n        }\n        /**\n         * The mount order and hierarchy is specific to ensure our element ref\n         * is hydrated by the time features fire their effects.\n         */\n        return (React.createElement(MotionContext.Provider, { value: context },\n            MeasureLayout && context.visualElement ? (React.createElement(MeasureLayout, { visualElement: context.visualElement, ...configAndProps })) : null,\n            useRender(Component, props, useMotionRef(visualState, context.visualElement, externalRef), visualState, isStatic, context.visualElement)));\n    }\n    const ForwardRefComponent = forwardRef(MotionComponent);\n    ForwardRefComponent[motionComponentSymbol] = Component;\n    return ForwardRefComponent;\n}\nfunction useLayoutId({ layoutId }) {\n    const layoutGroupId = useContext(LayoutGroupContext).id;\n    return layoutGroupId && layoutId !== undefined\n        ? layoutGroupId + \"-\" + layoutId\n        : layoutId;\n}\n\nexport { createMotionComponent };\n","import { useContext, useRef, useInsertionEffect, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { MotionConfigContext } from '../../context/MotionConfigContext.mjs';\nimport { optimizedAppearDataAttribute } from '../../animation/optimized-appear/data-id.mjs';\n\nfunction useVisualElement(Component, visualState, props, createVisualElement) {\n    const { visualElement: parent } = useContext(MotionContext);\n    const lazyContext = useContext(LazyContext);\n    const presenceContext = useContext(PresenceContext);\n    const reducedMotionConfig = useContext(MotionConfigContext).reducedMotion;\n    const visualElementRef = useRef();\n    /**\n     * If we haven't preloaded a renderer, check to see if we have one lazy-loaded\n     */\n    createVisualElement = createVisualElement || lazyContext.renderer;\n    if (!visualElementRef.current && createVisualElement) {\n        visualElementRef.current = createVisualElement(Component, {\n            visualState,\n            parent,\n            props,\n            presenceContext,\n            blockInitialAnimation: presenceContext\n                ? presenceContext.initial === false\n                : false,\n            reducedMotionConfig,\n        });\n    }\n    const visualElement = visualElementRef.current;\n    useInsertionEffect(() => {\n        visualElement && visualElement.update(props, presenceContext);\n    });\n    /**\n     * Cache this value as we want to know whether HandoffAppearAnimations\n     * was present on initial render - it will be deleted after this.\n     */\n    const wantsHandoff = useRef(Boolean(props[optimizedAppearDataAttribute] && !window.HandoffComplete));\n    useIsomorphicLayoutEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.render();\n        /**\n         * Ideally this function would always run in a useEffect.\n         *\n         * However, if we have optimised appear animations to handoff from,\n         * it needs to happen synchronously to ensure there's no flash of\n         * incorrect styles in the event of a hydration error.\n         *\n         * So if we detect a situtation where optimised appear animations\n         * are running, we use useLayoutEffect to trigger animations.\n         */\n        if (wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n    });\n    useEffect(() => {\n        if (!visualElement)\n            return;\n        visualElement.updateFeatures();\n        if (!wantsHandoff.current && visualElement.animationState) {\n            visualElement.animationState.animateChanges();\n        }\n        if (wantsHandoff.current) {\n            wantsHandoff.current = false;\n            // This ensures all future calls to animateChanges() will run in useEffect\n            window.HandoffComplete = true;\n        }\n    });\n    return visualElement;\n}\n\nexport { useVisualElement };\n","import { useCallback } from 'react';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\n\n/**\n * Creates a ref function that, when called, hydrates the provided\n * external ref and VisualElement.\n */\nfunction useMotionRef(visualState, visualElement, externalRef) {\n    return useCallback((instance) => {\n        instance && visualState.mount && visualState.mount(instance);\n        if (visualElement) {\n            instance\n                ? visualElement.mount(instance)\n                : visualElement.unmount();\n        }\n        if (externalRef) {\n            if (typeof externalRef === \"function\") {\n                externalRef(instance);\n            }\n            else if (isRefObject(externalRef)) {\n                externalRef.current = instance;\n            }\n        }\n    }, \n    /**\n     * Only pass a new ref callback to React if we've received a visual element\n     * factory. Otherwise we'll be mounting/remounting every time externalRef\n     * or other dependencies change.\n     */\n    [visualElement]);\n}\n\nexport { useMotionRef };\n","import { createMotionComponent } from '../../motion/index.mjs';\n\n/**\n * Convert any React component into a `motion` component. The provided component\n * **must** use `React.forwardRef` to the underlying DOM component you want to animate.\n *\n * ```jsx\n * const Component = React.forwardRef((props, ref) => {\n *   return <div ref={ref} />\n * })\n *\n * const MotionComponent = motion(Component)\n * ```\n *\n * @public\n */\nfunction createMotionProxy(createConfig) {\n    function custom(Component, customMotionComponentConfig = {}) {\n        return createMotionComponent(createConfig(Component, customMotionComponentConfig));\n    }\n    if (typeof Proxy === \"undefined\") {\n        return custom;\n    }\n    /**\n     * A cache of generated `motion` components, e.g `motion.div`, `motion.input` etc.\n     * Rather than generating them anew every render.\n     */\n    const componentCache = new Map();\n    return new Proxy(custom, {\n        /**\n         * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.\n         * The prop name is passed through as `key` and we can use that to generate a `motion`\n         * DOM component with that name.\n         */\n        get: (_target, key) => {\n            /**\n             * If this element doesn't exist in the component cache, create it and cache.\n             */\n            if (!componentCache.has(key)) {\n                componentCache.set(key, custom(key));\n            }\n            return componentCache.get(key);\n        },\n    });\n}\n\nexport { createMotionProxy };\n","const createHtmlRenderState = () => ({\n    style: {},\n    transform: {},\n    transformOrigin: {},\n    vars: {},\n});\n\nexport { createHtmlRenderState };\n","import { useMemo } from 'react';\nimport { isForcedMotionValue } from '../../motion/utils/is-forced-motion-value.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\nimport { buildHTMLStyles } from './utils/build-styles.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nfunction copyRawValuesOnly(target, source, props) {\n    for (const key in source) {\n        if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {\n            target[key] = source[key];\n        }\n    }\n}\nfunction useInitialMotionValues({ transformTemplate }, visualState, isStatic) {\n    return useMemo(() => {\n        const state = createHtmlRenderState();\n        buildHTMLStyles(state, visualState, { enableHardwareAcceleration: !isStatic }, transformTemplate);\n        return Object.assign({}, state.vars, state.style);\n    }, [visualState]);\n}\nfunction useStyle(props, visualState, isStatic) {\n    const styleProp = props.style || {};\n    const style = {};\n    /**\n     * Copy non-Motion Values straight into style\n     */\n    copyRawValuesOnly(style, styleProp, props);\n    Object.assign(style, useInitialMotionValues(props, visualState, isStatic));\n    return props.transformValues ? props.transformValues(style) : style;\n}\nfunction useHTMLProps(props, visualState, isStatic) {\n    // The `any` isn't ideal but it is the type of createElement props argument\n    const htmlProps = {};\n    const style = useStyle(props, visualState, isStatic);\n    if (props.drag && props.dragListener !== false) {\n        // Disable the ghost element when a user drags\n        htmlProps.draggable = false;\n        // Disable text selection\n        style.userSelect =\n            style.WebkitUserSelect =\n                style.WebkitTouchCallout =\n                    \"none\";\n        // Disable scrolling on the draggable direction\n        style.touchAction =\n            props.drag === true\n                ? \"none\"\n                : `pan-${props.drag === \"x\" ? \"y\" : \"x\"}`;\n    }\n    if (props.tabIndex === undefined &&\n        (props.onTap || props.onTapStart || props.whileTap)) {\n        htmlProps.tabIndex = 0;\n    }\n    htmlProps.style = style;\n    return htmlProps;\n}\n\nexport { copyRawValuesOnly, useHTMLProps };\n","/**\n * A list of all valid MotionProps.\n *\n * @privateRemarks\n * This doesn't throw if a `MotionProp` name is missing - it should.\n */\nconst validMotionProps = new Set([\n    \"animate\",\n    \"exit\",\n    \"variants\",\n    \"initial\",\n    \"style\",\n    \"values\",\n    \"variants\",\n    \"transition\",\n    \"transformTemplate\",\n    \"transformValues\",\n    \"custom\",\n    \"inherit\",\n    \"onLayoutAnimationStart\",\n    \"onLayoutAnimationComplete\",\n    \"onLayoutMeasure\",\n    \"onBeforeLayoutMeasure\",\n    \"onAnimationStart\",\n    \"onAnimationComplete\",\n    \"onUpdate\",\n    \"onDragStart\",\n    \"onDrag\",\n    \"onDragEnd\",\n    \"onMeasureDragConstraints\",\n    \"onDirectionLock\",\n    \"onDragTransitionEnd\",\n    \"_dragX\",\n    \"_dragY\",\n    \"onHoverStart\",\n    \"onHoverEnd\",\n    \"onViewportEnter\",\n    \"onViewportLeave\",\n    \"ignoreStrict\",\n    \"viewport\",\n]);\n/**\n * Check whether a prop name is a valid `MotionProp` key.\n *\n * @param key - Name of the property to check\n * @returns `true` is key is a valid `MotionProp`.\n *\n * @public\n */\nfunction isValidMotionProp(key) {\n    return (key.startsWith(\"while\") ||\n        (key.startsWith(\"drag\") && key !== \"draggable\") ||\n        key.startsWith(\"layout\") ||\n        key.startsWith(\"onTap\") ||\n        key.startsWith(\"onPan\") ||\n        validMotionProps.has(key));\n}\n\nexport { isValidMotionProp };\n","import { isValidMotionProp } from '../../../motion/utils/valid-prop.mjs';\n\nlet shouldForward = (key) => !isValidMotionProp(key);\nfunction loadExternalIsValidProp(isValidProp) {\n    if (!isValidProp)\n        return;\n    // Explicitly filter our events\n    shouldForward = (key) => key.startsWith(\"on\") ? !isValidMotionProp(key) : isValidProp(key);\n}\n/**\n * Emotion and Styled Components both allow users to pass through arbitrary props to their components\n * to dynamically generate CSS. They both use the `@emotion/is-prop-valid` package to determine which\n * of these should be passed to the underlying DOM node.\n *\n * However, when styling a Motion component `styled(motion.div)`, both packages pass through *all* props\n * as it's seen as an arbitrary component rather than a DOM node. Motion only allows arbitrary props\n * passed through the `custom` prop so it doesn't *need* the payload or computational overhead of\n * `@emotion/is-prop-valid`, however to fix this problem we need to use it.\n *\n * By making it an optionalDependency we can offer this functionality only in the situations where it's\n * actually required.\n */\ntry {\n    /**\n     * We attempt to import this package but require won't be defined in esm environments, in that case\n     * isPropValid will have to be provided via `MotionContext`. In a 6.0.0 this should probably be removed\n     * in favour of explicit injection.\n     */\n    loadExternalIsValidProp(require(\"@emotion/is-prop-valid\").default);\n}\ncatch (_a) {\n    // We don't need to actually do anything here - the fallback is the existing `isPropValid`.\n}\nfunction filterProps(props, isDom, forwardMotionProps) {\n    const filteredProps = {};\n    for (const key in props) {\n        /**\n         * values is considered a valid prop by Emotion, so if it's present\n         * this will be rendered out to the DOM unless explicitly filtered.\n         *\n         * We check the type as it could be used with the `feColorMatrix`\n         * element, which we support.\n         */\n        if (key === \"values\" && typeof props.values === \"object\")\n            continue;\n        if (shouldForward(key) ||\n            (forwardMotionProps === true && isValidMotionProp(key)) ||\n            (!isDom && !isValidMotionProp(key)) ||\n            // If trying to use native HTML drag events, forward drag listeners\n            (props[\"draggable\"] && key.startsWith(\"onDrag\"))) {\n            filteredProps[key] = props[key];\n        }\n    }\n    return filteredProps;\n}\n\nexport { filterProps, loadExternalIsValidProp };\n","import { createHtmlRenderState } from '../../html/utils/create-render-state.mjs';\n\nconst createSvgRenderState = () => ({\n    ...createHtmlRenderState(),\n    attrs: {},\n});\n\nexport { createSvgRenderState };\n","import { useMemo } from 'react';\nimport { copyRawValuesOnly } from '../html/use-props.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\n\nfunction useSVGProps(props, visualState, _isStatic, Component) {\n    const visualProps = useMemo(() => {\n        const state = createSvgRenderState();\n        buildSVGAttrs(state, visualState, { enableHardwareAcceleration: false }, isSVGTag(Component), props.transformTemplate);\n        return {\n            ...state.attrs,\n            style: { ...state.style },\n        };\n    }, [visualState]);\n    if (props.style) {\n        const rawStyles = {};\n        copyRawValuesOnly(rawStyles, props.style, props);\n        visualProps.style = { ...rawStyles, ...visualProps.style };\n    }\n    return visualProps;\n}\n\nexport { useSVGProps };\n","import { useMemo, createElement } from 'react';\nimport { useHTMLProps } from '../html/use-props.mjs';\nimport { filterProps } from './utils/filter-props.mjs';\nimport { isSVGComponent } from './utils/is-svg-component.mjs';\nimport { useSVGProps } from '../svg/use-props.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction createUseRender(forwardMotionProps = false) {\n    const useRender = (Component, props, ref, { latestValues }, isStatic) => {\n        const useVisualProps = isSVGComponent(Component)\n            ? useSVGProps\n            : useHTMLProps;\n        const visualProps = useVisualProps(props, latestValues, isStatic, Component);\n        const filteredProps = filterProps(props, typeof Component === \"string\", forwardMotionProps);\n        const elementProps = {\n            ...filteredProps,\n            ...visualProps,\n            ref,\n        };\n        /**\n         * If component has been handed a motion value as its child,\n         * memoise its initial value and render that. Subsequent updates\n         * will be handled by the onChange handler\n         */\n        const { children } = props;\n        const renderedChildren = useMemo(() => (isMotionValue(children) ? children.get() : children), [children]);\n        return createElement(Component, {\n            ...elementProps,\n            children: renderedChildren,\n        });\n    };\n    return useRender;\n}\n\nexport { createUseRender };\n","import { isCustomValue } from '../../utils/resolve-value.mjs';\nimport { isMotionValue } from './is-motion-value.mjs';\n\n/**\n * If the provided value is a MotionValue, this returns the actual value, otherwise just the value itself\n *\n * TODO: Remove and move to library\n */\nfunction resolveMotionValue(value) {\n    const unwrappedValue = isMotionValue(value) ? value.get() : value;\n    return isCustomValue(unwrappedValue)\n        ? unwrappedValue.toValue()\n        : unwrappedValue;\n}\n\nexport { resolveMotionValue };\n","import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props, {});\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n","import { useRef } from 'react';\n\n/**\n * Creates a constant value over the lifecycle of a component.\n *\n * Even if `useMemo` is provided an empty array as its final argument, it doesn't offer\n * a guarantee that it won't re-run for performance reasons later on. By using `useConstant`\n * you can ensure that initialisers don't execute twice or more.\n */\nfunction useConstant(init) {\n    const ref = useRef(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n\nexport { useConstant };\n","import { renderSVG } from './utils/render.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { createSvgRenderState } from './utils/create-render-state.mjs';\nimport { buildSVGAttrs } from './utils/build-attrs.mjs';\nimport { isSVGTag } from './utils/is-svg-tag.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst svgMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps: scrapeMotionValuesFromProps,\n        createRenderState: createSvgRenderState,\n        onMount: (props, instance, { renderState, latestValues }) => {\n            frame.read(() => {\n                try {\n                    renderState.dimensions =\n                        typeof instance.getBBox ===\n                            \"function\"\n                            ? instance.getBBox()\n                            : instance.getBoundingClientRect();\n                }\n                catch (e) {\n                    // Most likely trying to measure an unrendered element under Firefox\n                    renderState.dimensions = {\n                        x: 0,\n                        y: 0,\n                        width: 0,\n                        height: 0,\n                    };\n                }\n            });\n            frame.render(() => {\n                buildSVGAttrs(renderState, latestValues, { enableHardwareAcceleration: false }, isSVGTag(instance.tagName), props.transformTemplate);\n                renderSVG(instance, renderState);\n            });\n        },\n    }),\n};\n\nexport { svgMotionConfig };\n","import { makeUseVisualState } from '../../motion/utils/use-visual-state.mjs';\nimport { scrapeMotionValuesFromProps } from './utils/scrape-motion-values.mjs';\nimport { createHtmlRenderState } from './utils/create-render-state.mjs';\n\nconst htmlMotionConfig = {\n    useVisualState: makeUseVisualState({\n        scrapeMotionValuesFromProps,\n        createRenderState: createHtmlRenderState,\n    }),\n};\n\nexport { htmlMotionConfig };\n","const distance = (a, b) => Math.abs(a - b);\nfunction distance2D(a, b) {\n    // Multi-dimensional\n    const xDelta = distance(a.x, b.x);\n    const yDelta = distance(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n}\n\nexport { distance, distance2D };\n","import { extractEventInfo } from '../../events/event-info.mjs';\nimport { secondsToMilliseconds, millisecondsToSeconds } from '../../utils/time-conversion.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { pipe } from '../../utils/pipe.mjs';\nimport { distance2D } from '../../utils/distance.mjs';\nimport { isPrimaryPointer } from '../../events/utils/is-primary-pointer.mjs';\nimport { frame, cancelFrame, frameData } from '../../frameloop/frame.mjs';\n\n/**\n * @internal\n */\nclass PanSession {\n    constructor(event, handlers, { transformPagePoint, contextWindow } = {}) {\n        /**\n         * @internal\n         */\n        this.startEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEvent = null;\n        /**\n         * @internal\n         */\n        this.lastMoveEventInfo = null;\n        /**\n         * @internal\n         */\n        this.handlers = {};\n        /**\n         * @internal\n         */\n        this.contextWindow = window;\n        this.updatePoint = () => {\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const info = getPanInfo(this.lastMoveEventInfo, this.history);\n            const isPanStarted = this.startEvent !== null;\n            // Only start panning if the offset is larger than 3 pixels. If we make it\n            // any larger than this we'll want to reset the pointer history\n            // on the first update to avoid visual snapping to the cursoe.\n            const isDistancePastThreshold = distance2D(info.offset, { x: 0, y: 0 }) >= 3;\n            if (!isPanStarted && !isDistancePastThreshold)\n                return;\n            const { point } = info;\n            const { timestamp } = frameData;\n            this.history.push({ ...point, timestamp });\n            const { onStart, onMove } = this.handlers;\n            if (!isPanStarted) {\n                onStart && onStart(this.lastMoveEvent, info);\n                this.startEvent = this.lastMoveEvent;\n            }\n            onMove && onMove(this.lastMoveEvent, info);\n        };\n        this.handlePointerMove = (event, info) => {\n            this.lastMoveEvent = event;\n            this.lastMoveEventInfo = transformPoint(info, this.transformPagePoint);\n            // Throttle mouse move event to once per frame\n            frame.update(this.updatePoint, true);\n        };\n        this.handlePointerUp = (event, info) => {\n            this.end();\n            if (!(this.lastMoveEvent && this.lastMoveEventInfo))\n                return;\n            const { onEnd, onSessionEnd } = this.handlers;\n            const panInfo = getPanInfo(event.type === \"pointercancel\"\n                ? this.lastMoveEventInfo\n                : transformPoint(info, this.transformPagePoint), this.history);\n            if (this.startEvent && onEnd) {\n                onEnd(event, panInfo);\n            }\n            onSessionEnd && onSessionEnd(event, panInfo);\n        };\n        // If we have more than one touch, don't start detecting this gesture\n        if (!isPrimaryPointer(event))\n            return;\n        this.handlers = handlers;\n        this.transformPagePoint = transformPagePoint;\n        this.contextWindow = contextWindow || window;\n        const info = extractEventInfo(event);\n        const initialInfo = transformPoint(info, this.transformPagePoint);\n        const { point } = initialInfo;\n        const { timestamp } = frameData;\n        this.history = [{ ...point, timestamp }];\n        const { onSessionStart } = handlers;\n        onSessionStart &&\n            onSessionStart(event, getPanInfo(initialInfo, this.history));\n        this.removeListeners = pipe(addPointerEvent(this.contextWindow, \"pointermove\", this.handlePointerMove), addPointerEvent(this.contextWindow, \"pointerup\", this.handlePointerUp), addPointerEvent(this.contextWindow, \"pointercancel\", this.handlePointerUp));\n    }\n    updateHandlers(handlers) {\n        this.handlers = handlers;\n    }\n    end() {\n        this.removeListeners && this.removeListeners();\n        cancelFrame(this.updatePoint);\n    }\n}\nfunction transformPoint(info, transformPagePoint) {\n    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;\n}\nfunction subtractPoint(a, b) {\n    return { x: a.x - b.x, y: a.y - b.y };\n}\nfunction getPanInfo({ point }, history) {\n    return {\n        point,\n        delta: subtractPoint(point, lastDevicePoint(history)),\n        offset: subtractPoint(point, startDevicePoint(history)),\n        velocity: getVelocity(history, 0.1),\n    };\n}\nfunction startDevicePoint(history) {\n    return history[0];\n}\nfunction lastDevicePoint(history) {\n    return history[history.length - 1];\n}\nfunction getVelocity(history, timeDelta) {\n    if (history.length < 2) {\n        return { x: 0, y: 0 };\n    }\n    let i = history.length - 1;\n    let timestampedPoint = null;\n    const lastPoint = lastDevicePoint(history);\n    while (i >= 0) {\n        timestampedPoint = history[i];\n        if (lastPoint.timestamp - timestampedPoint.timestamp >\n            secondsToMilliseconds(timeDelta)) {\n            break;\n        }\n        i--;\n    }\n    if (!timestampedPoint) {\n        return { x: 0, y: 0 };\n    }\n    const time = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);\n    if (time === 0) {\n        return { x: 0, y: 0 };\n    }\n    const currentVelocity = {\n        x: (lastPoint.x - timestampedPoint.x) / time,\n        y: (lastPoint.y - timestampedPoint.y) / time,\n    };\n    if (currentVelocity.x === Infinity) {\n        currentVelocity.x = 0;\n    }\n    if (currentVelocity.y === Infinity) {\n        currentVelocity.y = 0;\n    }\n    return currentVelocity;\n}\n\nexport { PanSession };\n","import { mix } from '../../utils/mix.mjs';\n\nfunction calcLength(axis) {\n    return axis.max - axis.min;\n}\nfunction isNear(value, target = 0, maxDistance = 0.01) {\n    return Math.abs(value - target) <= maxDistance;\n}\nfunction calcAxisDelta(delta, source, target, origin = 0.5) {\n    delta.origin = origin;\n    delta.originPoint = mix(source.min, source.max, delta.origin);\n    delta.scale = calcLength(target) / calcLength(source);\n    if (isNear(delta.scale, 1, 0.0001) || isNaN(delta.scale))\n        delta.scale = 1;\n    delta.translate =\n        mix(target.min, target.max, delta.origin) - delta.originPoint;\n    if (isNear(delta.translate) || isNaN(delta.translate))\n        delta.translate = 0;\n}\nfunction calcBoxDelta(delta, source, target, origin) {\n    calcAxisDelta(delta.x, source.x, target.x, origin ? origin.originX : undefined);\n    calcAxisDelta(delta.y, source.y, target.y, origin ? origin.originY : undefined);\n}\nfunction calcRelativeAxis(target, relative, parent) {\n    target.min = parent.min + relative.min;\n    target.max = target.min + calcLength(relative);\n}\nfunction calcRelativeBox(target, relative, parent) {\n    calcRelativeAxis(target.x, relative.x, parent.x);\n    calcRelativeAxis(target.y, relative.y, parent.y);\n}\nfunction calcRelativeAxisPosition(target, layout, parent) {\n    target.min = layout.min - parent.min;\n    target.max = target.min + calcLength(layout);\n}\nfunction calcRelativePosition(target, layout, parent) {\n    calcRelativeAxisPosition(target.x, layout.x, parent.x);\n    calcRelativeAxisPosition(target.y, layout.y, parent.y);\n}\n\nexport { calcAxisDelta, calcBoxDelta, calcLength, calcRelativeAxis, calcRelativeAxisPosition, calcRelativeBox, calcRelativePosition, isNear };\n","import { progress } from '../../../utils/progress.mjs';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { mix } from '../../../utils/mix.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : dragElastic[label] || 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n","function eachAxis(callback) {\n    return [callback(\"x\"), callback(\"y\")];\n}\n\nexport { eachAxis };\n","// Fixes https://github.com/framer/motion/issues/2270\nconst getContextWindow = ({ current }) => {\n    return current ? current.ownerDocument.defaultView : null;\n};\n\nexport { getContextWindow };\n","import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, {\n            transformPagePoint: this.visualElement.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.visualElement),\n        });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        var _a;\n        const { dragConstraints, dragElastic } = this.getProps();\n        const layout = this.visualElement.projection &&\n            !this.visualElement.projection.layout\n            ? this.visualElement.projection.measure(false)\n            : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n","import { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\n\nclass DragGesture extends Feature {\n    constructor(node) {\n        super(node);\n        this.removeGroupControls = noop;\n        this.removeListeners = noop;\n        this.controls = new VisualElementDragControls(node);\n    }\n    mount() {\n        // If we've been provided a DragControls for manual control over the drag gesture,\n        // subscribe this component to it on mount.\n        const { dragControls } = this.node.getProps();\n        if (dragControls) {\n            this.removeGroupControls = dragControls.subscribe(this.controls);\n        }\n        this.removeListeners = this.controls.addListeners() || noop;\n    }\n    unmount() {\n        this.removeGroupControls();\n        this.removeListeners();\n    }\n}\n\nexport { DragGesture };\n","import { PanSession } from './PanSession.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { Feature } from '../../motion/features/Feature.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { getContextWindow } from '../../utils/get-context-window.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst asyncHandler = (handler) => (event, info) => {\n    if (handler) {\n        frame.update(() => handler(event, info));\n    }\n};\nclass PanGesture extends Feature {\n    constructor() {\n        super(...arguments);\n        this.removePointerDownListener = noop;\n    }\n    onPointerDown(pointerDownEvent) {\n        this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {\n            transformPagePoint: this.node.getTransformPagePoint(),\n            contextWindow: getContextWindow(this.node),\n        });\n    }\n    createPanHandlers() {\n        const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();\n        return {\n            onSessionStart: asyncHandler(onPanSessionStart),\n            onStart: asyncHandler(onPanStart),\n            onMove: onPan,\n            onEnd: (event, info) => {\n                delete this.session;\n                if (onPanEnd) {\n                    frame.update(() => onPanEnd(event, info));\n                }\n            },\n        };\n    }\n    mount() {\n        this.removePointerDownListener = addPointerEvent(this.node.current, \"pointerdown\", (event) => this.onPointerDown(event));\n    }\n    update() {\n        this.session && this.session.updateHandlers(this.createPanHandlers());\n    }\n    unmount() {\n        this.removePointerDownListener();\n        this.session && this.session.end();\n    }\n}\n\nexport { PanGesture };\n","/**\n * This should only ever be modified on the client otherwise it'll\n * persist through server requests. If we need instanced states we\n * could lazy-init via root.\n */\nconst globalProjectionState = {\n    /**\n     * Global flag as to whether the tree has animated since the last time\n     * we resized the window\n     */\n    hasAnimatedSinceResize: true,\n    /**\n     * We set this to true once, on the first update. Any nodes added to the tree beyond that\n     * update will be given a `data-projection-id` attribute.\n     */\n    hasEverUpdated: false,\n};\n\nexport { globalProjectionState };\n","import { px } from '../../value/types/numbers/units.mjs';\n\nfunction pixelsToPercent(pixels, axis) {\n    if (axis.max === axis.min)\n        return 0;\n    return (pixels / (axis.max - axis.min)) * 100;\n}\n/**\n * We always correct borderRadius as a percentage rather than pixels to reduce paints.\n * For example, if you are projecting a box that is 100px wide with a 10px borderRadius\n * into a box that is 200px wide with a 20px borderRadius, that is actually a 10%\n * borderRadius in both states. If we animate between the two in pixels that will trigger\n * a paint each time. If we animate between the two in percentage we'll avoid a paint.\n */\nconst correctBorderRadius = {\n    correct: (latest, node) => {\n        if (!node.target)\n            return latest;\n        /**\n         * If latest is a string, if it's a percentage we can return immediately as it's\n         * going to be stretched appropriately. Otherwise, if it's a pixel, convert it to a number.\n         */\n        if (typeof latest === \"string\") {\n            if (px.test(latest)) {\n                latest = parseFloat(latest);\n            }\n            else {\n                return latest;\n            }\n        }\n        /**\n         * If latest is a number, it's a pixel value. We use the current viewportBox to calculate that\n         * pixel value as a percentage of each axis\n         */\n        const x = pixelsToPercent(latest, node.target.x);\n        const y = pixelsToPercent(latest, node.target.y);\n        return `${x}% ${y}%`;\n    },\n};\n\nexport { correctBorderRadius, pixelsToPercent };\n","import { mix } from '../../utils/mix.mjs';\nimport { complex } from '../../value/types/complex/index.mjs';\n\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        return template(shadow);\n    },\n};\n\nexport { correctBoxShadow };\n","import React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\nimport { frame } from '../../../frameloop/frame.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                frame.postRender(() => {\n                    const stack = projection.getStack();\n                    if (!stack || !stack.members.length) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            queueMicrotask(() => {\n                if (!projection.currentAnimation && projection.isLead()) {\n                    this.safeToRemove();\n                }\n            });\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup && layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext && promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove && safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n","import { useContext, useId, useEffect } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\n\n/**\n * When a component is the child of `AnimatePresence`, it can use `usePresence`\n * to access information about whether it's still present in the React tree.\n *\n * ```jsx\n * import { usePresence } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const [isPresent, safeToRemove] = usePresence()\n *\n *   useEffect(() => {\n *     !isPresent && setTimeout(safeToRemove, 1000)\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * If `isPresent` is `false`, it means that a component has been removed the tree, but\n * `AnimatePresence` won't really remove it until `safeToRemove` has been called.\n *\n * @public\n */\nfunction usePresence() {\n    const context = useContext(PresenceContext);\n    if (context === null)\n        return [true, null];\n    const { isPresent, onExitComplete, register } = context;\n    // It's safe to call the following hooks conditionally (after an early return) because the context will always\n    // either be null or non-null for the lifespan of the component.\n    const id = useId();\n    useEffect(() => register(id), []);\n    const safeToRemove = () => onExitComplete && onExitComplete(id);\n    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];\n}\n/**\n * Similar to `usePresence`, except `useIsPresent` simply returns whether or not the component is present.\n * There is no `safeToRemove` function.\n *\n * ```jsx\n * import { useIsPresent } from \"framer-motion\"\n *\n * export const Component = () => {\n *   const isPresent = useIsPresent()\n *\n *   useEffect(() => {\n *     !isPresent && console.log(\"I've been removed!\")\n *   }, [isPresent])\n *\n *   return <div />\n * }\n * ```\n *\n * @public\n */\nfunction useIsPresent() {\n    return isPresent(useContext(PresenceContext));\n}\nfunction isPresent(context) {\n    return context === null ? true : context.isPresent;\n}\n\nexport { isPresent, useIsPresent, usePresence };\n","import { circOut } from '../../easing/circ.mjs';\nimport { progress } from '../../utils/progress.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { noop } from '../../utils/noop.mjs';\nimport { percent, px } from '../../value/types/numbers/units.mjs';\n\nconst borders = [\"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\"];\nconst numBorders = borders.length;\nconst asNumber = (value) => typeof value === \"string\" ? parseFloat(value) : value;\nconst isPx = (value) => typeof value === \"number\" || px.test(value);\nfunction mixValues(target, follow, lead, progress, shouldCrossfadeOpacity, isOnlyMember) {\n    if (shouldCrossfadeOpacity) {\n        target.opacity = mix(0, \n        // TODO Reinstate this if only child\n        lead.opacity !== undefined ? lead.opacity : 1, easeCrossfadeIn(progress));\n        target.opacityExit = mix(follow.opacity !== undefined ? follow.opacity : 1, 0, easeCrossfadeOut(progress));\n    }\n    else if (isOnlyMember) {\n        target.opacity = mix(follow.opacity !== undefined ? follow.opacity : 1, lead.opacity !== undefined ? lead.opacity : 1, progress);\n    }\n    /**\n     * Mix border radius\n     */\n    for (let i = 0; i < numBorders; i++) {\n        const borderLabel = `border${borders[i]}Radius`;\n        let followRadius = getRadius(follow, borderLabel);\n        let leadRadius = getRadius(lead, borderLabel);\n        if (followRadius === undefined && leadRadius === undefined)\n            continue;\n        followRadius || (followRadius = 0);\n        leadRadius || (leadRadius = 0);\n        const canMix = followRadius === 0 ||\n            leadRadius === 0 ||\n            isPx(followRadius) === isPx(leadRadius);\n        if (canMix) {\n            target[borderLabel] = Math.max(mix(asNumber(followRadius), asNumber(leadRadius), progress), 0);\n            if (percent.test(leadRadius) || percent.test(followRadius)) {\n                target[borderLabel] += \"%\";\n            }\n        }\n        else {\n            target[borderLabel] = leadRadius;\n        }\n    }\n    /**\n     * Mix rotation\n     */\n    if (follow.rotate || lead.rotate) {\n        target.rotate = mix(follow.rotate || 0, lead.rotate || 0, progress);\n    }\n}\nfunction getRadius(values, radiusName) {\n    return values[radiusName] !== undefined\n        ? values[radiusName]\n        : values.borderRadius;\n}\n// /**\n//  * We only want to mix the background color if there's a follow element\n//  * that we're not crossfading opacity between. For instance with switch\n//  * AnimateSharedLayout animations, this helps the illusion of a continuous\n//  * element being animated but also cuts down on the number of paints triggered\n//  * for elements where opacity is doing that work for us.\n//  */\n// if (\n//     !hasFollowElement &&\n//     latestLeadValues.backgroundColor &&\n//     latestFollowValues.backgroundColor\n// ) {\n//     /**\n//      * This isn't ideal performance-wise as mixColor is creating a new function every frame.\n//      * We could probably create a mixer that runs at the start of the animation but\n//      * the idea behind the crossfader is that it runs dynamically between two potentially\n//      * changing targets (ie opacity or borderRadius may be animating independently via variants)\n//      */\n//     leadState.backgroundColor = followState.backgroundColor = mixColor(\n//         latestFollowValues.backgroundColor as string,\n//         latestLeadValues.backgroundColor as string\n//     )(p)\n// }\nconst easeCrossfadeIn = compress(0, 0.5, circOut);\nconst easeCrossfadeOut = compress(0.5, 0.95, noop);\nfunction compress(min, max, easing) {\n    return (p) => {\n        // Could replace ifs with clamp\n        if (p < min)\n            return 0;\n        if (p > max)\n            return 1;\n        return easing(progress(min, max, p));\n    };\n}\n\nexport { mixValues };\n","/**\n * Reset an axis to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyAxisInto(axis, originAxis) {\n    axis.min = originAxis.min;\n    axis.max = originAxis.max;\n}\n/**\n * Reset a box to the provided origin box.\n *\n * This is a mutative operation.\n */\nfunction copyBoxInto(box, originBox) {\n    copyAxisInto(box.x, originBox.x);\n    copyAxisInto(box.y, originBox.y);\n}\n\nexport { copyAxisInto, copyBoxInto };\n","import { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { scalePoint } from './delta-apply.mjs';\n\n/**\n * Remove a delta from a point. This is essentially the steps of applyPointDelta in reverse\n */\nfunction removePointDelta(point, translate, scale, originPoint, boxScale) {\n    point -= translate;\n    point = scalePoint(point, 1 / scale, originPoint);\n    if (boxScale !== undefined) {\n        point = scalePoint(point, 1 / boxScale, originPoint);\n    }\n    return point;\n}\n/**\n * Remove a delta from an axis. This is essentially the steps of applyAxisDelta in reverse\n */\nfunction removeAxisDelta(axis, translate = 0, scale = 1, origin = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {\n    if (percent.test(translate)) {\n        translate = parseFloat(translate);\n        const relativeProgress = mix(sourceAxis.min, sourceAxis.max, translate / 100);\n        translate = relativeProgress - sourceAxis.min;\n    }\n    if (typeof translate !== \"number\")\n        return;\n    let originPoint = mix(originAxis.min, originAxis.max, origin);\n    if (axis === originAxis)\n        originPoint -= translate;\n    axis.min = removePointDelta(axis.min, translate, scale, originPoint, boxScale);\n    axis.max = removePointDelta(axis.max, translate, scale, originPoint, boxScale);\n}\n/**\n * Remove a transforms from an axis. This is essentially the steps of applyAxisTransforms in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin, sourceAxis) {\n    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin, sourceAxis);\n}\n/**\n * The names of the motion values we want to apply as translation, scale and origin.\n */\nconst xKeys = [\"x\", \"scaleX\", \"originX\"];\nconst yKeys = [\"y\", \"scaleY\", \"originY\"];\n/**\n * Remove a transforms from an box. This is essentially the steps of applyAxisBox in reverse\n * and acts as a bridge between motion values and removeAxisDelta\n */\nfunction removeBoxTransforms(box, transforms, originBox, sourceBox) {\n    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : undefined, sourceBox ? sourceBox.x : undefined);\n    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : undefined, sourceBox ? sourceBox.y : undefined);\n}\n\nexport { removeAxisDelta, removeAxisTransforms, removeBoxTransforms, removePointDelta };\n","import { calcLength } from './delta-calc.mjs';\n\nfunction isAxisDeltaZero(delta) {\n    return delta.translate === 0 && delta.scale === 1;\n}\nfunction isDeltaZero(delta) {\n    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);\n}\nfunction boxEquals(a, b) {\n    return (a.x.min === b.x.min &&\n        a.x.max === b.x.max &&\n        a.y.min === b.y.min &&\n        a.y.max === b.y.max);\n}\nfunction boxEqualsRounded(a, b) {\n    return (Math.round(a.x.min) === Math.round(b.x.min) &&\n        Math.round(a.x.max) === Math.round(b.x.max) &&\n        Math.round(a.y.min) === Math.round(b.y.min) &&\n        Math.round(a.y.max) === Math.round(b.y.max));\n}\nfunction aspectRatio(box) {\n    return calcLength(box.x) / calcLength(box.y);\n}\n\nexport { aspectRatio, boxEquals, boxEqualsRounded, isDeltaZero };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n","function buildProjectionTransform(delta, treeScale, latestTransform) {\n    let transform = \"\";\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    if (xTranslate || yTranslate) {\n        transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    }\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    if (treeScale.x !== 1 || treeScale.y !== 1) {\n        transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    }\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    if (elementScaleX !== 1 || elementScaleY !== 1) {\n        transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    }\n    return transform || \"none\";\n}\n\nexport { buildProjectionTransform };\n","const compareByDepth = (a, b) => a.depth - b.depth;\n\nexport { compareByDepth };\n","import { addUniqueItem, removeItem } from '../../utils/array.mjs';\nimport { compareByDepth } from './compare-by-depth.mjs';\n\nclass FlatTree {\n    constructor() {\n        this.children = [];\n        this.isDirty = false;\n    }\n    add(child) {\n        addUniqueItem(this.children, child);\n        this.isDirty = true;\n    }\n    remove(child) {\n        removeItem(this.children, child);\n        this.isDirty = true;\n    }\n    forEach(callback) {\n        this.isDirty && this.children.sort(compareByDepth);\n        this.isDirty = false;\n        this.children.forEach(callback);\n    }\n}\n\nexport { FlatTree };\n","import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength, isNear } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEqualsRounded, isDeltaZero, aspectRatio, boxEquals } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale, has2DTranslate } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nimport { delay } from '../../utils/delay.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { record } from '../../debug/record.mjs';\nimport { isSVGElement } from '../../render/dom/utils/is-svg-element.mjs';\nimport { animateSingleValue } from '../../animation/interfaces/single-value.mjs';\nimport { clamp } from '../../utils/clamp.mjs';\nimport { cancelFrame, frameData, steps, frame } from '../../frameloop/frame.mjs';\nimport { noop } from '../../utils/noop.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\nconst hiddenVisibility = { visibility: \"hidden\" };\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nlet id = 0;\n/**\n * Use a mutable data object for debug data so as to not create a new\n * object every frame.\n */\nconst projectionFrameData = {\n    type: \"projectionFrame\",\n    totalNodes: 0,\n    resolvedTargetDeltas: 0,\n    recalculatedProjection: 0,\n};\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A unique ID generated for every projection node.\n             */\n            this.id = id++;\n            /**\n             * An id that represents a unique session instigated by startUpdate.\n             */\n            this.animationId = 0;\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Flag to true if we think the projection calculations for this node needs\n             * recalculating as a result of an updated transform or layout animation.\n             */\n            this.isProjectionDirty = false;\n            /**\n             * Flag to true if the layout *or* transform has changed. This then gets propagated\n             * throughout the projection tree, forcing any element below to recalculate on the next frame.\n             */\n            this.isSharedProjectionDirty = false;\n            /**\n             * Flag transform dirty. This gets propagated throughout the whole tree but is only\n             * respected by shared nodes.\n             */\n            this.isTransformDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to layoutly\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            this.hasTreeAnimated = false;\n            // Note: Currently only running on root node\n            this.updateScheduled = false;\n            this.projectionUpdateScheduled = false;\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            /**\n             * This is a multi-step process as shared nodes might be of different depths. Nodes\n             * are sorted by depth order, so we need to resolve the entire tree before moving to\n             * the next step.\n             */\n            this.updateProjection = () => {\n                this.projectionUpdateScheduled = false;\n                /**\n                 * Reset debug counts. Manually resetting rather than creating a new\n                 * object each frame.\n                 */\n                projectionFrameData.totalNodes =\n                    projectionFrameData.resolvedTargetDeltas =\n                        projectionFrameData.recalculatedProjection =\n                            0;\n                this.nodes.forEach(propagateDirtyNodes);\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n                this.nodes.forEach(cleanDirtyNodes);\n                record(projectionFrameData);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager && subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {\n            if (this.instance)\n                return;\n            this.isSVG = isSVGElement(instance);\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.current) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            this.parent && this.parent.children.add(this);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let cancelDelay;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    cancelDelay && cancelDelay();\n                    cancelDelay = delay(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = this.options.transition ||\n                        visualElement.getDefaultTransition() ||\n                        defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEqualsRounded(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (this.options.layoutRoot ||\n                        (this.resumeFrom && this.resumeFrom.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion ||\n                            this.options.layoutRoot) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged) {\n                            finishAnimation(this);\n                        }\n                        if (this.isLead() && this.options.onExitComplete) {\n                            this.options.onExitComplete();\n                        }\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            const stack = this.getStack();\n            stack && stack.remove(this);\n            this.parent && this.parent.children.delete(this);\n            this.instance = undefined;\n            cancelFrame(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            return (this.isAnimationBlocked ||\n                (this.parent && this.parent.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            this.nodes && this.nodes.forEach(resetRotation);\n            this.animationId++;\n        }\n        getTransformTemplate() {\n            const { visualElement } = this.options;\n            return visualElement && visualElement.getProps().transformTemplate;\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            this.root.hasTreeAnimated = true;\n            if (this.root.isUpdateBlocked()) {\n                this.options.onExitComplete && this.options.onExitComplete();\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                node.updateScroll(\"snapshot\");\n                if (node.options.layoutRoot) {\n                    node.willUpdate(false);\n                }\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = this.getTransformTemplate();\n            this.prevTransformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        update() {\n            this.updateScheduled = false;\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating) {\n                this.nodes.forEach(clearIsLayoutDirty);\n            }\n            this.isUpdating = false;\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            /**\n             * Manually flush any pending updates. Ideally\n             * we could leave this to the following requestAnimationFrame but this seems\n             * to leave a flash of incorrectly styled content.\n             */\n            const now = performance.now();\n            frameData.delta = clamp(0, 1000 / 60, now - frameData.timestamp);\n            frameData.timestamp = now;\n            frameData.isProcessing = true;\n            steps.update.process(frameData);\n            steps.preRender.process(frameData);\n            steps.render.process(frameData);\n            frameData.isProcessing = false;\n        }\n        didUpdate() {\n            if (!this.updateScheduled) {\n                this.updateScheduled = true;\n                queueMicrotask(() => this.update());\n            }\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            if (!this.projectionUpdateScheduled) {\n                this.projectionUpdateScheduled = true;\n                frame.preRender(this.updateProjection, false, true);\n            }\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            frame.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            this.snapshot = this.measure();\n        }\n        updateLayout() {\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const prevLayout = this.layout;\n            this.layout = this.measure(false);\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.layoutBox);\n            const { visualElement } = this.options;\n            visualElement &&\n                visualElement.notify(\"LayoutMeasure\", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : undefined);\n        }\n        updateScroll(phase = \"measure\") {\n            let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);\n            if (this.scroll &&\n                this.scroll.animationId === this.root.animationId &&\n                this.scroll.phase === phase) {\n                needsMeasurement = false;\n            }\n            if (needsMeasurement) {\n                this.scroll = {\n                    animationId: this.root.animationId,\n                    phase,\n                    isRoot: checkIsScrollRoot(this.instance),\n                    offset: measureScroll(this.instance),\n                };\n            }\n        }\n        resetTransform() {\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = this.getTransformTemplate();\n            const transformTemplateValue = transformTemplate\n                ? transformTemplate(this.latestValues, \"\")\n                : undefined;\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure(removeTransform = true) {\n            const pageBox = this.measurePageBox();\n            let layoutBox = this.removeElementScroll(pageBox);\n            /**\n             * Measurements taken during the pre-render stage\n             * still have transforms applied so we remove them\n             * via calculation.\n             */\n            if (removeTransform) {\n                layoutBox = this.removeTransform(layoutBox);\n            }\n            roundBox(layoutBox);\n            return {\n                animationId: this.root.animationId,\n                measuredBox: pageBox,\n                layoutBox,\n                latestValues: {},\n                source: this.id,\n            };\n        }\n        measurePageBox() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.offset.x);\n                translateAxis(box.y, scroll.offset.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (scroll.isRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.offset.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.offset.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.offset.x);\n                    translateAxis(boxWithoutScroll.y, scroll.offset.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.offset.x,\n                        y: -node.scroll.offset.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measurePageBox();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, node.snapshot ? node.snapshot.layoutBox : undefined, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n            this.isProjectionDirty = true;\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        forceRelativeParentToResolveTarget() {\n            if (!this.relativeParent)\n                return;\n            /**\n             * If the parent target isn't up-to-date, force it to update.\n             * This is an unfortunate de-optimisation as it means any updating relative\n             * projection will cause all the relative parents to recalculate back\n             * up the tree.\n             */\n            if (this.relativeParent.resolvedRelativeTargetAt !==\n                frameData.timestamp) {\n                this.relativeParent.resolveTargetDelta(true);\n            }\n        }\n        resolveTargetDelta(forceRecalculation = false) {\n            var _a;\n            /**\n             * Once the dirty status of nodes has been spread through the tree, we also\n             * need to check if we have a shared node of a different depth that has itself\n             * been dirtied.\n             */\n            const lead = this.getLead();\n            this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);\n            this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);\n            this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            /**\n             * We don't use transform for this step of processing so we don't\n             * need to check whether any nodes have changed transform.\n             */\n            const canSkip = !(forceRecalculation ||\n                (isShared && this.isSharedProjectionDirty) ||\n                this.isProjectionDirty ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) ||\n                this.attemptToResolveRelativeTarget);\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            this.resolvedRelativeTargetAt = frameData.timestamp;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    relativeParent.layout &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                this.relativeParent &&\n                this.relativeParent.target) {\n                this.forceRelativeParentToResolveTarget();\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.layoutBox);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.layoutBox);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.layoutBox);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                const relativeParent = this.getClosestProjectingParent();\n                if (relativeParent &&\n                    Boolean(relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !relativeParent.options.layoutScroll &&\n                    relativeParent.target &&\n                    this.animationProgress !== 1) {\n                    this.relativeParent = relativeParent;\n                    this.forceRelativeParentToResolveTarget();\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n                else {\n                    this.relativeParent = this.relativeTarget = undefined;\n                }\n            }\n            /**\n             * Increase debug counter for resolved target deltas\n             */\n            projectionFrameData.resolvedTargetDeltas++;\n        }\n        getClosestProjectingParent() {\n            if (!this.parent ||\n                hasScale(this.parent.latestValues) ||\n                has2DTranslate(this.parent.latestValues)) {\n                return undefined;\n            }\n            if (this.parent.isProjecting()) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        isProjecting() {\n            return Boolean((this.relativeTarget ||\n                this.targetDelta ||\n                this.options.layoutRoot) &&\n                this.layout);\n        }\n        calcProjection() {\n            var _a;\n            const lead = this.getLead();\n            const isShared = Boolean(this.resumingFrom) || this !== lead;\n            let canSkip = true;\n            /**\n             * If this is a normal layout animation and neither this node nor its nearest projecting\n             * is dirty then we can't skip.\n             */\n            if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If this is a shared layout animation and this node's shared projection is dirty then\n             * we can't skip.\n             */\n            if (isShared &&\n                (this.isSharedProjectionDirty || this.isTransformDirty)) {\n                canSkip = false;\n            }\n            /**\n             * If we have resolved the target this frame we must recalculate the\n             * projection to ensure it visually represents the internal calculations.\n             */\n            if (this.resolvedRelativeTargetAt === frameData.timestamp) {\n                canSkip = false;\n            }\n            if (canSkip)\n                return;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean((this.parent && this.parent.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.layoutBox);\n            /**\n             * Record previous tree scales before updating.\n             */\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);\n            /**\n             * If this layer needs to perform scale correction but doesn't have a target,\n             * use the layout as the target.\n             */\n            if (lead.layout &&\n                !lead.target &&\n                (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {\n                lead.target = lead.layout.layoutBox;\n            }\n            const { target } = lead;\n            if (!target) {\n                /**\n                 * If we don't have a target to project into, but we were previously\n                 * projecting, we want to remove the stored transform and schedule\n                 * a render to ensure the elements reflect the removed transform.\n                 */\n                if (this.projectionTransform) {\n                    this.projectionDelta = createDelta();\n                    this.projectionTransform = \"none\";\n                    this.scheduleRender();\n                }\n                return;\n            }\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n            /**\n             * Increase debug counter for recalculated projections\n             */\n            projectionFrameData.recalculatedProjection++;\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            this.options.scheduleRender && this.options.scheduleRender();\n            if (notifyAll) {\n                const stack = this.getStack();\n                stack && stack.scheduleRender();\n            }\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = snapshot\n                ? snapshot.latestValues\n                : {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            if (!this.relativeParent ||\n                !this.relativeParent.options.layoutRoot) {\n                this.relativeTarget = this.relativeTargetOrigin = undefined;\n            }\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const snapshotSource = snapshot ? snapshot.source : undefined;\n            const layoutSource = this.layout ? this.layout.source : undefined;\n            const isSharedLayoutAnimation = snapshotSource !== layoutSource;\n            const stack = this.getStack();\n            const isOnlyMember = !stack || stack.members.length <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            let prevRelativeTarget;\n            this.mixTargetDelta = (latest) => {\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    this.relativeParent &&\n                    this.relativeParent.layout) {\n                    calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                    /**\n                     * If this is an unchanged relative target we can consider the\n                     * projection not dirty.\n                     */\n                    if (prevRelativeTarget &&\n                        boxEquals(this.relativeTarget, prevRelativeTarget)) {\n                        this.isProjectionDirty = false;\n                    }\n                    if (!prevRelativeTarget)\n                        prevRelativeTarget = createBox();\n                    copyBoxInto(prevRelativeTarget, this.relativeTarget);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(this.options.layoutRoot ? 1000 : 0);\n        }\n        startAnimation(options) {\n            this.notifyListeners(\"animationStart\");\n            this.currentAnimation && this.currentAnimation.stop();\n            if (this.resumingFrom && this.resumingFrom.currentAnimation) {\n                this.resumingFrom.currentAnimation.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelFrame(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = frame.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animateSingleValue(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        this.mixTargetDelta(latest);\n                        options.onUpdate && options.onUpdate(latest);\n                    },\n                    onComplete: () => {\n                        options.onComplete && options.onComplete();\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            const stack = this.getStack();\n            stack && stack.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            if (this.currentAnimation) {\n                this.mixTargetDelta && this.mixTargetDelta(animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const lead = this.getLead();\n            let { targetWithTransforms, target, layout, latestValues } = lead;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            /**\n             * If we're only animating position, and this element isn't the lead element,\n             * then instead of projecting into the lead box we instead want to calculate\n             * a new target that aligns the two boxes but maintains the layout shape.\n             */\n            if (this !== lead &&\n                this.layout &&\n                layout &&\n                shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout.layoutBox)) {\n                target = this.target || createBox();\n                const xLength = calcLength(this.layout.layoutBox.x);\n                target.x.min = lead.target.x.min;\n                target.x.max = target.x.min + xLength;\n                const yLength = calcLength(this.layout.layoutBox.y);\n                target.y.min = lead.target.y.min;\n                target.y.max = target.y.min + yLength;\n            }\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its layout layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            const config = node.options.initialPromotionConfig;\n            node.promote({\n                transition: config ? config.transition : undefined,\n                preserveFollowOpacity: config && config.shouldPreserveFollowOpacity\n                    ? config.shouldPreserveFollowOpacity(node)\n                    : undefined,\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            /**\n             * An unrolled check for rotation values. Most elements don't have any rotation and\n             * skipping the nested loop and new object creation is 50% faster.\n             */\n            const { latestValues } = visualElement;\n            if (latestValues.rotate ||\n                latestValues.rotateX ||\n                latestValues.rotateY ||\n                latestValues.rotateZ) {\n                hasRotate = true;\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const key = \"rotate\" + transformAxes[i];\n                // Record the rotation and then temporarily set it to 0\n                if (latestValues[key]) {\n                    resetValues[key] = latestValues[key];\n                    visualElement.setStaticValue(key, 0);\n                }\n            }\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement.render();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp) {\n            var _a, _b;\n            if (!this.instance || this.isSVG)\n                return undefined;\n            if (!this.isVisible) {\n                return hiddenVisibility;\n            }\n            const styles = {\n                visibility: \"\",\n            };\n            const transformTemplate = this.getTransformTemplate();\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its layout\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                /**\n                 * Only apply scale correction to the value if we have an\n                 * active projection transform. Otherwise these values become\n                 * vulnerable to distortion if the element changes size without\n                 * a corresponding layout animation.\n                 */\n                const corrected = styles.transform === \"none\"\n                    ? valuesToRender[key]\n                    : correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { layoutBox: layout, measuredBox: measuredLayout } = node.layout;\n        const { animationType } = node.options;\n        const isShared = snapshot.source !== node.layout.source;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout)) {\n            eachAxis((axis) => {\n                const axisSnapshot = isShared\n                    ? snapshot.measuredBox[axis]\n                    : snapshot.layoutBox[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n                /**\n                 * Ensure relative target gets resized and rerendererd\n                 */\n                if (node.relativeTarget && !node.currentAnimation) {\n                    node.isProjectionDirty = true;\n                    node.relativeTarget[axis].max =\n                        node.relativeTarget[axis].min + length;\n                }\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layoutBox);\n        const visualDelta = createDelta();\n        if (isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measuredBox);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layoutBox);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            const relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (relativeParent && !relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.layoutBox);\n                    if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                    if (relativeParent.options.layoutRoot) {\n                        node.relativeTarget = relativeLayout;\n                        node.relativeTargetOrigin = relativeSnapshot;\n                        node.relativeParent = relativeParent;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        const { onExitComplete } = node.options;\n        onExitComplete && onExitComplete();\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction propagateDirtyNodes(node) {\n    /**\n     * Increase debug counter for nodes encountered this frame\n     */\n    projectionFrameData.totalNodes++;\n    if (!node.parent)\n        return;\n    /**\n     * If this node isn't projecting, propagate isProjectionDirty. It will have\n     * no performance impact but it will allow the next child that *is* projecting\n     * but *isn't* dirty to just check its parent to see if *any* ancestor needs\n     * correcting.\n     */\n    if (!node.isProjecting()) {\n        node.isProjectionDirty = node.parent.isProjectionDirty;\n    }\n    /**\n     * Propagate isSharedProjectionDirty and isTransformDirty\n     * throughout the whole tree. A future revision can take another look at\n     * this but for safety we still recalcualte shared nodes.\n     */\n    node.isSharedProjectionDirty || (node.isSharedProjectionDirty = Boolean(node.isProjectionDirty ||\n        node.parent.isProjectionDirty ||\n        node.parent.isSharedProjectionDirty));\n    node.isTransformDirty || (node.isTransformDirty = node.parent.isTransformDirty);\n}\nfunction cleanDirtyNodes(node) {\n    node.isProjectionDirty =\n        node.isSharedProjectionDirty =\n            node.isTransformDirty =\n                false;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction clearIsLayoutDirty(node) {\n    node.isLayoutDirty = false;\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notify(\"BeforeLayoutMeasure\");\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n    node.isProjectionDirty = true;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nconst userAgentContains = (string) => typeof navigator !== \"undefined\" &&\n    navigator.userAgent.toLowerCase().includes(string);\n/**\n * Measured bounding boxes must be rounded in Safari and\n * left untouched in Chrome, otherwise non-integer layouts within scaled-up elements\n * can appear to jump.\n */\nconst roundPoint = userAgentContains(\"applewebkit/\") && !userAgentContains(\"chrome/\")\n    ? Math.round\n    : noop;\nfunction roundAxis(axis) {\n    // Round to the nearest .5 pixels to support subpixel layouts\n    axis.min = roundPoint(axis.min);\n    axis.max = roundPoint(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\nfunction shouldAnimatePositionOnly(animationType, snapshot, layout) {\n    return (animationType === \"position\" ||\n        (animationType === \"preserve-aspect\" &&\n            !isNear(aspectRatio(snapshot), aspectRatio(layout), 0.2)));\n}\n\nexport { cleanDirtyNodes, createProjectionNode, mixAxis, mixAxisDelta, mixBox, propagateDirtyNodes };\n","function record(data) {\n    if (window.MotionDebug) {\n        window.MotionDebug.record(data);\n    }\n}\n\nexport { record };\n","function isSVGElement(element) {\n    return element instanceof SVGElement && element.tagName !== \"svg\";\n}\n\nexport { isSVGElement };\n","import { frame, cancelFrame } from '../frameloop/frame.mjs';\n\n/**\n * Timeout defined in ms\n */\nfunction delay(callback, timeout) {\n    const start = performance.now();\n    const checkElapsed = ({ timestamp }) => {\n        const elapsed = timestamp - start;\n        if (elapsed >= timeout) {\n            cancelFrame(checkElapsed);\n            callback(elapsed - timeout);\n        }\n    };\n    frame.read(checkElapsed, true);\n    return () => cancelFrame(checkElapsed);\n}\n\nexport { delay };\n","import { animateMotionValue } from './motion-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction animateSingleValue(value, keyframes, options) {\n    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);\n    motionValue$1.start(animateMotionValue(\"\", motionValue$1, keyframes, options));\n    return motionValue$1.animation;\n}\n\nexport { animateSingleValue };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\n\nconst DocumentProjectionNode = createProjectionNode({\n    attachResizeListener: (ref, notify) => addDomEvent(ref, \"resize\", notify),\n    measureScroll: () => ({\n        x: document.documentElement.scrollLeft || document.body.scrollLeft,\n        y: document.documentElement.scrollTop || document.body.scrollTop,\n    }),\n    checkIsScrollRoot: () => true,\n});\n\nexport { DocumentProjectionNode };\n","import { createProjectionNode } from './create-projection-node.mjs';\nimport { DocumentProjectionNode } from './DocumentProjectionNode.mjs';\n\nconst rootProjectionNode = {\n    current: undefined,\n};\nconst HTMLProjectionNode = createProjectionNode({\n    measureScroll: (instance) => ({\n        x: instance.scrollLeft,\n        y: instance.scrollTop,\n    }),\n    defaultParent: () => {\n        if (!rootProjectionNode.current) {\n            const documentNode = new DocumentProjectionNode({});\n            documentNode.mount(window);\n            documentNode.setOptions({ layoutScroll: true });\n            rootProjectionNode.current = documentNode;\n        }\n        return rootProjectionNode.current;\n    },\n    resetTransform: (instance, value) => {\n        instance.style.transform = value !== undefined ? value : \"none\";\n    },\n    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === \"fixed\"),\n});\n\nexport { HTMLProjectionNode, rootProjectionNode };\n","import { DragGesture } from '../../gestures/drag/index.mjs';\nimport { PanGesture } from '../../gestures/pan/index.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\nimport { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\n\nconst drag = {\n    pan: {\n        Feature: PanGesture,\n    },\n    drag: {\n        Feature: DragGesture,\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { drag };\n","import { HTMLProjectionNode } from '../../projection/node/HTMLProjectionNode.mjs';\nimport { MeasureLayout } from './layout/MeasureLayout.mjs';\n\nconst layout = {\n    layout: {\n        ProjectionNode: HTMLProjectionNode,\n        MeasureLayout,\n    },\n};\n\nexport { layout };\n","import { createMotionComponent } from '../../motion/index.mjs';\nimport { createMotionProxy } from './motion-proxy.mjs';\nimport { createDomMotionConfig } from './utils/create-config.mjs';\nimport { gestureAnimations } from '../../motion/features/gestures.mjs';\nimport { animations } from '../../motion/features/animations.mjs';\nimport { drag } from '../../motion/features/drag.mjs';\nimport { createDomVisualElement } from './create-visual-element.mjs';\nimport { layout } from '../../motion/features/layout.mjs';\n\nconst preloadedFeatures = {\n    ...animations,\n    ...gestureAnimations,\n    ...drag,\n    ...layout,\n};\n/**\n * HTML & SVG components, optimised for use with gestures and animation. These can be used as\n * drop-in replacements for any HTML & SVG component, all CSS & SVG properties are supported.\n *\n * @public\n */\nconst motion = /*@__PURE__*/ createMotionProxy((Component, config) => createDomMotionConfig(Component, config, preloadedFeatures, createDomVisualElement));\n/**\n * Create a DOM `motion` component with the provided string. This is primarily intended\n * as a full alternative to `motion` for consumers who have to support environments that don't\n * support `Proxy`.\n *\n * ```javascript\n * import { createDomMotionComponent } from \"framer-motion\"\n *\n * const motion = {\n *   div: createDomMotionComponent('div')\n * }\n * ```\n *\n * @public\n */\nfunction createDomMotionComponent(key) {\n    return createMotionComponent(createDomMotionConfig(key, { forwardMotionProps: false }, preloadedFeatures, createDomVisualElement));\n}\n\nexport { createDomMotionComponent, motion };\n","import { isSVGComponent } from './is-svg-component.mjs';\nimport { createUseRender } from '../use-render.mjs';\nimport { svgMotionConfig } from '../../svg/config-motion.mjs';\nimport { htmlMotionConfig } from '../../html/config-motion.mjs';\n\nfunction createDomMotionConfig(Component, { forwardMotionProps = false }, preloadedFeatures, createVisualElement) {\n    const baseConfig = isSVGComponent(Component)\n        ? svgMotionConfig\n        : htmlMotionConfig;\n    return {\n        ...baseConfig,\n        preloadedFeatures,\n        useRender: createUseRender(forwardMotionProps),\n        createVisualElement,\n        Component,\n    };\n}\n\nexport { createDomMotionConfig };\n","import { FieldTimeOutlined, FileWordOutlined } from \"@ant-design/icons\"\r\nimport { List, Skeleton, Space, Typography } from \"antd\"\r\nimport BasicLayout from \"components/templates/BasicLayout\"\r\nimport { motion } from \"framer-motion\"\r\nimport { graphql, navigate } from \"gatsby\"\r\nimport { GatsbyImage, getImage } from \"gatsby-plugin-image\"\r\nimport React, { createElement } from \"react\"\r\n\r\nconst { Title } = Typography\r\n\r\nconst IconText = ({ icon, text }) => (\r\n  <Space>\r\n    {createElement(icon)}\r\n    {text}\r\n  </Space>\r\n)\r\n\r\nconst BlogPage = ({\r\n  location: { pathname, search, hash },\r\n  data: {\r\n    allMdx: {\r\n      edges,\r\n      pageInfo: { totalCount, perPage, pageCount, currentPage },\r\n    },\r\n    file,\r\n  },\r\n}) => {\r\n  const avatarImage = getImage(file)\r\n\r\n  const blogList = edges.map(({ node }) => {\r\n    const {\r\n      id,\r\n      excerpt,\r\n      fields: {\r\n        timeToRead: { text, words },\r\n      },\r\n      frontmatter: { title, date, slug, description },\r\n    } = node\r\n\r\n    return { title, date, url: slug, id, excerpt, description, timeToRead: text, words }\r\n  })\r\n\r\n  const handleListItemClick = url => {\r\n    navigate(`/blog${url}`)\r\n  }\r\n\r\n  return (\r\n    <BasicLayout style={{ minHeight: \"100%\" }}>\r\n      <Typography>\r\n        <Title>Posts</Title>\r\n      </Typography>\r\n      <List\r\n        bordered\r\n        itemLayout=\"vertical\"\r\n        pagination={{ pageSize: perPage, position: \"bottom\", align: \"center\", total: totalCount, current: currentPage }}\r\n        dataSource={blogList}\r\n        rowKey={\"id\"}\r\n        renderItem={({ title, url, description, excerpt, timeToRead, words }) => (\r\n          <motion.div\r\n            whileHover={{ scale: 0.95 }}\r\n            whileTap={{ scale: 1 }}>\r\n            <List.Item\r\n              actions={[\r\n                <IconText\r\n                  icon={FieldTimeOutlined}\r\n                  text={timeToRead}\r\n                  key=\"list-post-time-to-read\"\r\n                />,\r\n                <IconText\r\n                  icon={FileWordOutlined}\r\n                  text={words}\r\n                  key=\"list-post-words\"\r\n                />,\r\n              ]}\r\n              extra={\r\n                <Space\r\n                  style={{ height: \"100%\" }}\r\n                  align=\"center\">\r\n                  <Skeleton.Image />\r\n                </Space>\r\n              }\r\n              onClick={() => handleListItemClick(url)}>\r\n              <List.Item.Meta\r\n                title={title}\r\n                description={description}\r\n                avatar={\r\n                  <GatsbyImage\r\n                    image={avatarImage}\r\n                    alt=\"avatar\"\r\n                  />\r\n                }\r\n              />\r\n              {excerpt}\r\n            </List.Item>\r\n          </motion.div>\r\n        )}\r\n      />\r\n    </BasicLayout>\r\n  )\r\n}\r\n\r\nexport const Head = () => {\r\n  return (\r\n    <>\r\n      <title>Blog</title>\r\n      <meta\r\n        name=\"desciption\"\r\n        content=\"Developer Comnori's blog\"\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query posts {\r\n    allMdx(skip: 0, limit: 10, sort: { frontmatter: { date: DESC } }, filter: { frontmatter: { slug: { ne: null } } }) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            date\r\n            slug\r\n            description\r\n          }\r\n          id\r\n          excerpt(pruneLength: 200)\r\n          fields {\r\n            timeToRead {\r\n              text\r\n              words\r\n            }\r\n          }\r\n        }\r\n      }\r\n      pageInfo {\r\n        totalCount\r\n        perPage\r\n        pageCount\r\n        itemCount\r\n        currentPage\r\n        hasNextPage\r\n        hasPreviousPage\r\n      }\r\n    }\r\n    file(relativePath: { eq: \"icon.png\" }) {\r\n      childImageSharp {\r\n        gatsbyImageData(width: 91)\r\n      }\r\n    }\r\n  }\r\n`\r\nexport default BlogPage\r\n"],"names":["props","ref","AntdIcon","icon","MotionConfigContext","createContext","transformPagePoint","p","isStatic","reducedMotion","MotionContext","useIsomorphicLayoutEffect","useLayoutEffect","useEffect","useCreateMotionContext","initial","animate","context","undefined","inherit","getCurrentTreeVariants","useContext","useMemo","variantLabelsAsDependency","prop","Array","isArray","join","LayoutGroupContext","SwitchLayoutGroupContext","motionComponentSymbol","Symbol","for","preloadedFeatures","createVisualElement","useRender","useVisualState","Component","ForwardRefComponent","forwardRef","externalRef","MeasureLayout","configAndProps","layoutId","useLayoutId","visualState","visualElement","parent","lazyContext","LazyContext","presenceContext","reducedMotionConfig","visualElementRef","useRef","renderer","current","blockInitialAnimation","useInsertionEffect","update","wantsHandoff","Boolean","window","HandoffComplete","render","animationState","animateChanges","updateFeatures","useVisualElement","initialLayoutGroupConfig","isStrict","strict","loadFeatures","Provider","value","useCallback","instance","mount","unmount","useMotionRef","layoutGroupId","id","createMotionProxy","createConfig","custom","customMotionComponentConfig","Proxy","componentCache","Map","get","_target","key","has","set","createHtmlRenderState","style","transform","transformOrigin","vars","copyRawValuesOnly","target","source","i","useStyle","Object","assign","transformTemplate","state","enableHardwareAcceleration","useInitialMotionValues","transformValues","useHTMLProps","htmlProps","drag","dragListener","draggable","userSelect","WebkitUserSelect","WebkitTouchCallout","touchAction","tabIndex","onTap","onTapStart","whileTap","validMotionProps","Set","isValidMotionProp","startsWith","shouldForward","isValidProp","require","default","_a","createSvgRenderState","attrs","useSVGProps","_isStatic","visualProps","rawStyles","createUseRender","forwardMotionProps","latestValues","filteredProps","isDom","values","filterProps","elementProps","children","renderedChildren","createElement","resolveMotionValue","unwrappedValue","toValue","makeUseVisualState","config","make","scrapeMotionValuesFromProps","createRenderState","onMount","makeLatestValues","renderState","makeState","init","useConstant","scrapeMotionValues","motionValues","isControllingVariants$1","isVariantNode$1","isInitialAnimationBlocked","variantToSet","forEach","definition","resolved","transitionEnd","transition","valueTarget","length","svgMotionConfig","read","dimensions","getBBox","getBoundingClientRect","e","x","y","width","height","tagName","htmlMotionConfig","distance","a","b","Math","abs","PanSession","constructor","event","handlers","contextWindow","this","startEvent","lastMoveEvent","lastMoveEventInfo","updatePoint","info","getPanInfo","history","isPanStarted","isDistancePastThreshold","xDelta","yDelta","sqrt","distance2D","offset","point","timestamp","frameData","push","onStart","onMove","handlePointerMove","transformPoint","handlePointerUp","end","onEnd","onSessionEnd","panInfo","type","initialInfo","onSessionStart","removeListeners","pipe","updateHandlers","subtractPoint","delta","lastDevicePoint","startDevicePoint","velocity","getVelocity","timeDelta","timestampedPoint","lastPoint","time","currentVelocity","Infinity","calcLength","axis","max","min","isNear","maxDistance","calcAxisDelta","origin","originPoint","mix","scale","isNaN","translate","calcBoxDelta","originX","originY","calcRelativeAxis","relative","calcRelativeAxisPosition","layout","calcRelativePosition","calcRelativeAxisConstraints","calcViewportAxisConstraints","layoutAxis","constraintsAxis","defaultElastic","resolveAxisElastic","dragElastic","minLabel","maxLabel","resolvePointElastic","label","eachAxis","callback","getContextWindow","ownerDocument","defaultView","elementDragControls","WeakMap","VisualElementDragControls","openGlobalLock","isDragging","currentDirection","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","isPresent","panSession","stopAnimation","dragPropagation","onDragStart","getProps","resolveConstraints","projection","isAnimationBlocked","getAxisMotionValue","test","measuredAxis","layoutBox","parseFloat","setActive","dragDirectionLock","onDirectionLock","onDrag","lockThreshold","direction","getCurrentDirection","updateAxis","stop","getTransformPagePoint","cancel","startAnimation","onDragEnd","_point","shouldDrag","axisValue","next","applyConstraints","dragConstraints","measure","prevConstraints","resolveRefConstraints","top","left","bottom","right","calcRelativeConstraints","resolveDragElastic","relativeConstraints","rebaseAxisConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","calcViewportConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","bounceStiffness","bounceDamping","inertia","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","scalePositionWithinConstraints","boxProgress","latest","sourceLength","targetLength","progress","clamp","calcOrigin","updateScroll","updateLayout","addListeners","element","stopPointerListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","stopLayoutUpdateListener","hasLayoutChanged","motionValue","DragGesture","Feature","node","super","removeGroupControls","noop","controls","dragControls","subscribe","asyncHandler","handler","PanGesture","arguments","removePointerDownListener","onPointerDown","pointerDownEvent","session","createPanHandlers","onPanSessionStart","onPanStart","onPan","onPanEnd","globalProjectionState","hasAnimatedSinceResize","hasEverUpdated","pixelsToPercent","pixels","correctBorderRadius","correct","px","correctBoxShadow","treeScale","projectionDelta","original","shadow","complex","parse","template","createTransformer","xScale","yScale","averageScale","MeasureLayoutWithContext","componentDidMount","layoutGroup","switchLayoutGroup","defaultScaleCorrectors","group","add","register","didUpdate","safeToRemove","setOptions","options","onExitComplete","getSnapshotBeforeUpdate","prevProps","layoutDependency","willUpdate","promote","relegate","postRender","stack","getStack","members","componentDidUpdate","queueMicrotask","currentAnimation","isLead","componentWillUnmount","promoteContext","scheduleCheckAfterUnmount","remove","deregister","useId","usePresence","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow","borders","numBorders","asNumber","isPx","getRadius","radiusName","easeCrossfadeIn","compress","circ","easeCrossfadeOut","easing","copyAxisInto","originAxis","copyBoxInto","box","originBox","removePointDelta","boxScale","removeAxisTransforms","transforms","scaleKey","originKey","sourceAxis","removeAxisDelta","xKeys","yKeys","removeBoxTransforms","sourceBox","isAxisDeltaZero","isDeltaZero","boxEqualsRounded","round","aspectRatio","NodeStack","scheduleRender","prevLead","lead","indexOfNode","findIndex","member","preserveFollowOpacity","show","resumeFrom","preserveOpacity","snapshot","animationValues","isUpdating","isLayoutDirty","crossfade","hide","exitAnimationComplete","resumingFrom","removeLeadSnapshot","buildProjectionTransform","latestTransform","xTranslate","yTranslate","rotate","rotateX","rotateY","elementScaleX","elementScaleY","compareByDepth","depth","FlatTree","isDirty","child","sort","transformAxes","hiddenVisibility","visibility","projectionFrameData","totalNodes","resolvedTargetDeltas","recalculatedProjection","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","animationId","isTreeAnimating","isProjectionDirty","isSharedProjectionDirty","isTransformDirty","updateManuallyBlocked","updateBlockedByResize","isSVG","needsReset","shouldResetTransform","eventHandlers","hasTreeAnimated","updateScheduled","projectionUpdateScheduled","checkUpdateFailed","clearAllSnapshots","updateProjection","data","nodes","propagateDirtyNodes","resolveTargetDelta","calcProjection","cleanDirtyNodes","MotionDebug","record","hasProjected","isVisible","animationProgress","sharedNodes","path","name","notifyListeners","args","subscriptionManager","notify","hasListeners","SVGElement","cancelDelay","resizeUnblockUpdate","timeout","performance","now","checkElapsed","elapsed","delay","finishAnimation","registerSharedNode","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","relativeTarget","layoutTransition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","layoutRoot","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","delete","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","getTransformTemplate","shouldNotifyListeners","prevTransformTemplateValue","updateSnapshot","clearMeasurements","clearIsLayoutDirty","resetTransformStyle","notifyLayoutUpdate","isProcessing","process","preRender","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","alwaysMeasureLayout","prevLayout","layoutCorrected","phase","needsMeasurement","layoutScroll","scroll","isRoot","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","removeTransform","pageBox","measurePageBox","removeElementScroll","roundAxis","measuredBox","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","setTargetDelta","targetDelta","forceRelativeParentToResolveTarget","relativeParent","resolvedRelativeTargetAt","forceRecalculation","getLead","isShared","attemptToResolveRelativeTarget","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","isProjecting","canSkip","pendingAnimation","prevTreeScaleX","prevTreeScaleY","projectionTransform","projectionDeltaWithTransform","prevProjectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isOnlyMember","shouldCrossfadeOpacity","some","hasOpacityCrossfade","prevRelativeTarget","mixTargetDelta","output","from","to","mixAxisDelta","mixAxis","follow","opacity","opacityExit","borderLabel","followRadius","leadRadius","mixValues","keyframes","motionValue$1","animation","animateSingleValue","onUpdate","completeAnimation","applyTransformsToTarget","shouldAnimatePositionOnly","animationType","xLength","yLength","initialPromotionConfig","shouldPreserveFollowOpacity","getPrevLead","hasRotate","rotateZ","resetValues","setStaticValue","getProjectionStyles","styleProp","_b","styles","pointerEvents","emptyStyles","valuesToRender","corrected","num","resetTree","clear","measuredLayout","axisSnapshot","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","duration","ease","userAgentContains","string","navigator","userAgent","toLowerCase","includes","roundPoint","DocumentProjectionNode","document","documentElement","scrollLeft","body","scrollTop","rootProjectionNode","HTMLProjectionNode","documentNode","getComputedStyle","position","pan","ProjectionNode","animations","motion","Title","Typography","IconText","_ref","text","React","Space","Head","content","_ref2","location","pathname","search","hash","allMdx","edges","pageInfo","totalCount","perPage","pageCount","currentPage","file","avatarImage","getImage","blogList","map","_ref3","excerpt","fields","timeToRead","words","frontmatter","title","date","slug","description","url","BasicLayout","minHeight","List","bordered","itemLayout","pagination","pageSize","align","total","dataSource","rowKey","renderItem","_ref4","div","whileHover","Item","actions","FieldTimeOutlined","FileWordOutlined","extra","Skeleton","Image","onClick","navigate","handleListItemClick","Meta","avatar","GatsbyImage","image","alt"],"sourceRoot":""}